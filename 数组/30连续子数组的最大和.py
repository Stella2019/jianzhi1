'''
题目：HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常
需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望
旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。你会不会被他
忽悠住？(子向量的长度至少是1)
'''

'''
伪代码:动态规划 1. 最大子数组的和一定是由当前元素和之前最大连续子数组的和叠加在一起形 成的，因此需要遍历n个元素，看看当前元素和其之前的最大连续子数组的和能够创造新的最大 值。2. 具体步骤:dp[n]代表以当前元素为截止点的连续子序列的最大和，如果dp[n-1]>0， dp[n]=dp[n]+dp[n-1]，因为当前数字加上一个正数一定会变大;如果dp[n-1]<0，dp[n]不变，因 为当前数字加上一个负数一定会变小。使用一个变量max记录最大的dp值返回即可。
注意的点: 也可以利用两个数值来记录，max_sum记录各个子序列的最大值，res记录当前序列 +1后是否更大的值

对于连续子数组，可以用一个数值来存储当前和，如果当前和小于零，那么在进行到下一个元素的时候，直接把当前和赋值为下
一个元素，如果当前和大于零，则累加下一个元素，同时用一个maxNum存储最大值并随时更新。也可以利用动态规划解决。

29ms
5624k
'''

# -*- coding:utf-8 -*-
class Solution:
    def FindGreatestSumOfSubArray(self, array):
        # write code here
        if array == None or len(array) <= 0:
            return 0

        sum = 0
        result = array[0]
        for i in range(len(array)):
            if sum <= 0:
                sum = array[i]
            else:
                sum += array[i]

            if sum > result:
                result = sum

        return result


